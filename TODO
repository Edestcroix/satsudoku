
# TODO:
- rework the config parser to be universal and uniform across the benchmark files.
  right now it's a bit screwy. Might be good to use a library for this, or create
  a config manager class that can be used in all the scripts, which loads config on
  instantiation and provides methods to get the data from the config.
  Right now, if a config file isn't found the whole program just crashes on module import,
  because each module re-loads the config file. If the config was loaded in a class, a missing
  config would be detected on class instantiation and the program could exit gracefully.

- **Where do the CNF encodings go??** The CNF encoder in satcoder outputs CNF encodings to a file *somewhere* when it 
 is called. I have no idea where they go when this is packaged. Before it just output to the source tree.
 The overhead of generating the CNF encodings doesn't seem to be that bad, so could just generate them
 on the fly instead of caching them. (Just figured it out, they are generated in the working directory. Still, 
 they probably shouldn't go there.) Current plan is to stick them into `.encs` or something in the working dir and delete them after,
 or `~/.cache` and leave them there. Maybe have the encoder function take a parameter to specify whether to cache the encodings or not,
 that way, when sud2sat is called on a sinlge puzzle, it can be told not to cache the encodings, but when it's called by the benchmark
 script, which has to encode a lot of puzzles, it can be told to cache the encodings, and then it is the onus of the benchmark script
  to delete the encodings after it's done with them.


# Finished (Mostly)
- sud2sat and sat2sud both work out of the box when packaged, but
benchmark is not exposed as a command on installation yet, because it 
needs to be reworked to find data files and config files outside of 
the source tree.

to get this working, will need:
- **a new way of finding puzzle sets**, currently they are specified in a config file
  relative to the source tree, but this needs to be changed. It could be as simple as
  changing puzzleDir in the config.

- as an idea, could specify puzzle sets at runtime by passing the filename as an argument and require a header line in 
  the puzzle set file to specify the test info that is currently in the config file.

- 
- would then need to remove the puzzle set info from the config file, and add a parser to read the data
  that would have been in the config from the header line in the puzzle set file.

- another idea: **work the script to expect to be called in a specially organized directory** with
  puzzle sets and a config file specifying info for each set. This would probably be better
  as it could use the same config parsing it already has.

- **a new way of finding the config file**, currently it hardcoded. The config file should 
  be looked for in ~/.config/satsudoku or something, and if not found there should be
  some way of providing defaults. This could tie into the idea above of having tests and config
  being required in the directory the script is called from.
  